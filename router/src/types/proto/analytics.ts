// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: src/types/proto/analytics.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "analytics";

export interface AnalyticsRequest {
  userId: string;
}

export interface ReplyStat {
  NumberOfTodos: number;
  NumberOfTransactions: number;
}

export interface Stat {
  userId: string;
  NumberOfTodos: number;
  NumberOfTransactions: number;
}

function createBaseAnalyticsRequest(): AnalyticsRequest {
  return { userId: "" };
}

export const AnalyticsRequest = {
  encode(message: AnalyticsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AnalyticsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyticsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyticsRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: AnalyticsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalyticsRequest>, I>>(base?: I): AnalyticsRequest {
    return AnalyticsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalyticsRequest>, I>>(object: I): AnalyticsRequest {
    const message = createBaseAnalyticsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseReplyStat(): ReplyStat {
  return { NumberOfTodos: 0, NumberOfTransactions: 0 };
}

export const ReplyStat = {
  encode(message: ReplyStat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.NumberOfTodos !== 0) {
      writer.uint32(25).double(message.NumberOfTodos);
    }
    if (message.NumberOfTransactions !== 0) {
      writer.uint32(33).double(message.NumberOfTransactions);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReplyStat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplyStat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 25) {
            break;
          }

          message.NumberOfTodos = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.NumberOfTransactions = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplyStat {
    return {
      NumberOfTodos: isSet(object.NumberOfTodos) ? globalThis.Number(object.NumberOfTodos) : 0,
      NumberOfTransactions: isSet(object.NumberOfTransactions) ? globalThis.Number(object.NumberOfTransactions) : 0,
    };
  },

  toJSON(message: ReplyStat): unknown {
    const obj: any = {};
    if (message.NumberOfTodos !== 0) {
      obj.NumberOfTodos = message.NumberOfTodos;
    }
    if (message.NumberOfTransactions !== 0) {
      obj.NumberOfTransactions = message.NumberOfTransactions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReplyStat>, I>>(base?: I): ReplyStat {
    return ReplyStat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReplyStat>, I>>(object: I): ReplyStat {
    const message = createBaseReplyStat();
    message.NumberOfTodos = object.NumberOfTodos ?? 0;
    message.NumberOfTransactions = object.NumberOfTransactions ?? 0;
    return message;
  },
};

function createBaseStat(): Stat {
  return { userId: "", NumberOfTodos: 0, NumberOfTransactions: 0 };
}

export const Stat = {
  encode(message: Stat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.NumberOfTodos !== 0) {
      writer.uint32(25).double(message.NumberOfTodos);
    }
    if (message.NumberOfTransactions !== 0) {
      writer.uint32(33).double(message.NumberOfTransactions);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Stat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.NumberOfTodos = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.NumberOfTransactions = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Stat {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      NumberOfTodos: isSet(object.NumberOfTodos) ? globalThis.Number(object.NumberOfTodos) : 0,
      NumberOfTransactions: isSet(object.NumberOfTransactions) ? globalThis.Number(object.NumberOfTransactions) : 0,
    };
  },

  toJSON(message: Stat): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.NumberOfTodos !== 0) {
      obj.NumberOfTodos = message.NumberOfTodos;
    }
    if (message.NumberOfTransactions !== 0) {
      obj.NumberOfTransactions = message.NumberOfTransactions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Stat>, I>>(base?: I): Stat {
    return Stat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Stat>, I>>(object: I): Stat {
    const message = createBaseStat();
    message.userId = object.userId ?? "";
    message.NumberOfTodos = object.NumberOfTodos ?? 0;
    message.NumberOfTransactions = object.NumberOfTransactions ?? 0;
    return message;
  },
};

export interface Analytics {
  GetAnalytics(request: AnalyticsRequest): Promise<ReplyStat>;
  UpdateAnalytics(request: Stat): Promise<Stat>;
}

export const AnalyticsServiceName = "analytics.Analytics";
export class AnalyticsClientImpl implements Analytics {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AnalyticsServiceName;
    this.rpc = rpc;
    this.GetAnalytics = this.GetAnalytics.bind(this);
    this.UpdateAnalytics = this.UpdateAnalytics.bind(this);
  }
  GetAnalytics(request: AnalyticsRequest): Promise<ReplyStat> {
    const data = AnalyticsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetAnalytics", data);
    return promise.then((data) => ReplyStat.decode(_m0.Reader.create(data)));
  }

  UpdateAnalytics(request: Stat): Promise<Stat> {
    const data = Stat.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateAnalytics", data);
    return promise.then((data) => Stat.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
